import jsPDF from 'jspdf';
import * as XLSX from 'xlsx';

interface ForecastData {
  forecast_date: string;
  predicted_price: number;
  confidence_level: number;
  trend: string;
  weather_impact: number;
  seasonal_factor: number;
  supply_demand_ratio: number;
  market_volatility: number;
}

interface ExportOptions {
  title: string;
  material: string;
  region: string;
  timeframe: string;
  data: ForecastData[];
  summary: any;
}

export class ExportService {
  static async exportToPDF(options: ExportOptions): Promise<void> {
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      let currentY = 20;

      // Header
      doc.setFontSize(20);
      doc.setTextColor(51, 51, 51);
      doc.text('Construction Material Price Forecast Report', pageWidth / 2, currentY, { align: 'center' });
      
      currentY += 20;
      
      // Report details
      doc.setFontSize(12);
      doc.setTextColor(102, 102, 102);
      doc.text(`Material: ${options.material}`, 20, currentY);
      currentY += 10;
      doc.text(`Region: ${options.region}`, 20, currentY);
      currentY += 10;
      doc.text(`Forecast Period: ${options.timeframe}`, 20, currentY);
      currentY += 10;
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, currentY);
      
      currentY += 20;

      // Executive Summary
      doc.setFontSize(16);
      doc.setTextColor(51, 51, 51);
      doc.text('Executive Summary', 20, currentY);
      currentY += 15;

      doc.setFontSize(10);
      doc.setTextColor(102, 102, 102);
      
      if (options.summary) {
        const summaryText = [
          `Current Price: ₹${options.data[0]?.predicted_price.toFixed(2)}`,
          `Average Confidence: ${options.summary.avgConfidence?.toFixed(1)}%`,
          `Price Trend: ${options.summary.overallTrend || 'Stable'}`,
          `Expected Change: ${options.summary.priceChange?.toFixed(1)}%`,
        ];
        
        summaryText.forEach(text => {
          doc.text(text, 20, currentY);
          currentY += 8;
        });
      }

      currentY += 15;

      // Forecast Data Table Header
      doc.setFontSize(14);
      doc.setTextColor(51, 51, 51);
      doc.text('Detailed Forecast Data', 20, currentY);
      currentY += 15;

      // Table headers
      doc.setFontSize(9);
      doc.setTextColor(51, 51, 51);
      const headers = ['Date', 'Price (₹)', 'Confidence (%)', 'Trend', 'Weather Impact'];
      const colWidths = [30, 25, 25, 25, 30];
      let currentX = 20;

      headers.forEach((header, index) => {
        doc.text(header, currentX, currentY);
        currentX += colWidths[index];
      });

      currentY += 8;

      // Table data (first 20 entries)
      doc.setFontSize(8);
      doc.setTextColor(102, 102, 102);
      
      const dataToShow = options.data.slice(0, 20);
      dataToShow.forEach(item => {
        currentX = 20;
        const rowData = [
          new Date(item.forecast_date).toLocaleDateString(),
          item.predicted_price.toFixed(2),
          item.confidence_level.toFixed(1),
          item.trend,
          item.weather_impact.toFixed(1) + '%'
        ];

        if (currentY > 250) {
          doc.addPage();
          currentY = 20;
        }

        rowData.forEach((data, index) => {
          doc.text(data.toString(), currentX, currentY);
          currentX += colWidths[index];
        });
        currentY += 7;
      });

      // Footer
      doc.setFontSize(8);
      doc.setTextColor(153, 153, 153);
      doc.text('Generated by Advanced Material Price Forecast System', pageWidth / 2, 280, { align: 'center' });

      // Save the PDF
      doc.save(`forecast-report-${options.material}-${options.region}-${Date.now()}.pdf`);
    } catch (error) {
      console.error('Error exporting to PDF:', error);
      throw new Error('Failed to export PDF report');
    }
  }

  static async exportToExcel(options: ExportOptions): Promise<void> {
    try {
      const workbook = XLSX.utils.book_new();

      // Summary sheet
      const summaryData = [
        ['Material Forecast Report'],
        [''],
        ['Material:', options.material],
        ['Region:', options.region],
        ['Forecast Period:', options.timeframe],
        ['Generated:', new Date().toLocaleDateString()],
        [''],
        ['Summary Statistics:'],
        ['Current Price (₹):', options.data[0]?.predicted_price.toFixed(2)],
        ['Average Confidence (%):', options.summary?.avgConfidence?.toFixed(1)],
        ['Overall Trend:', options.summary?.overallTrend || 'Stable'],
        ['Expected Price Change (%):', options.summary?.priceChange?.toFixed(1)],
      ];

      const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
      XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');

      // Detailed forecast data
      const forecastData = [
        ['Date', 'Predicted Price (₹)', 'Confidence Level (%)', 'Trend', 'Weather Impact (%)', 'Seasonal Factor (%)', 'Supply-Demand Ratio', 'Market Volatility (%)']
      ];

      options.data.forEach(item => {
        forecastData.push([
          item.forecast_date,
          item.predicted_price.toString(),
          item.confidence_level.toString(),
          item.trend,
          item.weather_impact.toString(),
          item.seasonal_factor.toString(),
          item.supply_demand_ratio.toString(),
          item.market_volatility.toString()
        ]);
      });

      const dataSheet = XLSX.utils.aoa_to_sheet(forecastData);
      XLSX.utils.book_append_sheet(workbook, dataSheet, 'Forecast Data');

      // Market Analysis sheet
      const analysisData = [
        ['Market Analysis'],
        [''],
        ['Key Factors Affecting Prices:'],
        ['Factor', 'Impact Level', 'Description'],
        ['Weather Conditions', 'Medium', 'Seasonal weather patterns affect construction activity'],
        ['Supply Chain', 'High', 'Raw material availability and transportation costs'],
        ['Government Policies', 'Medium', 'Regulatory changes and infrastructure spending'],
        ['Global Markets', 'Low', 'International commodity prices and currency exchange'],
        [''],
        ['Risk Assessment:'],
        ['Risk Factor', 'Probability', 'Impact'],
        ['Price Volatility', 'Medium', 'Normal market fluctuations expected'],
        ['Supply Disruption', 'Low', 'Stable supply chain conditions'],
        ['Demand Surge', 'Medium', 'Infrastructure development projects'],
      ];

      const analysisSheet = XLSX.utils.aoa_to_sheet(analysisData);
      XLSX.utils.book_append_sheet(workbook, analysisSheet, 'Market Analysis');

      // Save the Excel file
      XLSX.writeFile(workbook, `forecast-analysis-${options.material}-${options.region}-${Date.now()}.xlsx`);
    } catch (error) {
      console.error('Error exporting to Excel:', error);
      throw new Error('Failed to export Excel report');
    }
  }

  static async exportToCSV(options: ExportOptions): Promise<void> {
    try {
      const headers = [
        'Date',
        'Predicted Price (₹)',
        'Confidence Level (%)',
        'Trend',
        'Weather Impact (%)',
        'Seasonal Factor (%)',
        'Supply-Demand Ratio',
        'Market Volatility (%)'
      ];

      const csvContent = [
        headers.join(','),
        ...options.data.map(item => [
          item.forecast_date,
          item.predicted_price,
          item.confidence_level,
          item.trend,
          item.weather_impact,
          item.seasonal_factor,
          item.supply_demand_ratio,
          item.market_volatility
        ].join(','))
      ].join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      
      if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `forecast-data-${options.material}-${options.region}-${Date.now()}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    } catch (error) {
      console.error('Error exporting to CSV:', error);
      throw new Error('Failed to export CSV file');
    }
  }
}